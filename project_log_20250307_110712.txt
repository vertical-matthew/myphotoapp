2025-03-07 11:07:12,377 - INFO - Script started.
2025-03-07 11:07:12,378 - INFO - Scanning directory: C:\Users\matt\Desktop\django\myphotoapp
2025-03-07 11:07:12,378 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\djangoclip.py
2025-03-07 11:07:12,378 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\manage.py
2025-03-07 11:07:12,379 - INFO - Scanning directory: C:\Users\matt\Desktop\django\myphotoapp\config
2025-03-07 11:07:12,379 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\config\asgi.py
2025-03-07 11:07:12,379 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\config\settings.py
2025-03-07 11:07:12,379 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\config\urls.py
2025-03-07 11:07:12,380 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\config\wsgi.py
2025-03-07 11:07:12,380 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\config\__init__.py
2025-03-07 11:07:12,380 - INFO - Scanning directory: C:\Users\matt\Desktop\django\myphotoapp\media
2025-03-07 11:07:12,380 - INFO - Scanning directory: C:\Users\matt\Desktop\django\myphotoapp\photos
2025-03-07 11:07:12,380 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\admin.py
2025-03-07 11:07:12,381 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\apps.py
2025-03-07 11:07:12,381 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\models.py
2025-03-07 11:07:12,381 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\tests.py
2025-03-07 11:07:12,381 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\views.py
2025-03-07 11:07:12,381 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\__init__.py
2025-03-07 11:07:12,382 - INFO - Scanning directory: C:\Users\matt\Desktop\django\myphotoapp\photos\management
2025-03-07 11:07:12,382 - INFO - Scanning directory: C:\Users\matt\Desktop\django\myphotoapp\photos\management\commands
2025-03-07 11:07:12,382 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\management\commands\import_data.py
2025-03-07 11:07:12,382 - INFO - Scanning directory: C:\Users\matt\Desktop\django\myphotoapp\photos\templates
2025-03-07 11:07:12,382 - INFO - Scanning directory: C:\Users\matt\Desktop\django\myphotoapp\photos\templates\photos
2025-03-07 11:07:12,382 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\templates\photos\main.html
2025-03-07 11:07:12,382 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\templates\photos\project_detail.html
2025-03-07 11:07:12,383 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\templates\photos\project_list.html
2025-03-07 11:07:12,383 - INFO - Processing file: C:\Users\matt\Desktop\django\myphotoapp\photos\templates\photos\repair_detail.html
2025-03-07 11:07:12,424 - INFO - Project contents copied to clipboard successfully.


=== Full Project Content ===



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\djangoclip.py -----


import os
import datetime
import logging
import pyperclip

def main():
    # Get the project root directory (assumes the script is run at the root)
    project_root = os.getcwd()
    print(f"Scanning Django project at: {project_root}")

    # Setup a log file with a date-timestamp in its name (file name safe)
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    log_filename = f"project_log_{timestamp}.txt"
    logging.basicConfig(
        filename=log_filename,
        level=logging.DEBUG,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    print(f"Logging details will be saved to: {log_filename}")
    logging.info("Script started.")

    # Only include files that represent your custom logic
    allowed_extensions = {'.py', '.html', '.css', '.js'}

    # Directories to be skipped during the scan
    skip_dirs = {'.git', '.idea', 'static', 'staticfiles', 'migrations', '__pycache__', 'venv'}

    project_text = []

    # Walk through the project directories
    for root, dirs, files in os.walk(project_root):
        # Remove directories we want to skip so they are not walked into
        dirs[:] = [d for d in dirs if d not in skip_dirs]
        print(f"Scanning directory: {root}")
        logging.info(f"Scanning directory: {root}")
        
        for file in files:
            # Check file extension; ignore files that are not in our allowed list
            file_ext = os.path.splitext(file)[1].lower()
            if file_ext not in allowed_extensions:
                continue

            # Construct the full file path
            file_path = os.path.join(root, file)
            print(f"Processing file: {file_path}")
            logging.info(f"Processing file: {file_path}")
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                # Append header with file location and its contents
                header = f"\n\n----- FILE: {file_path} -----\n\n"
                project_text.append(header)
                project_text.append(content)
            except Exception as e:
                error_msg = f"Could not read file {file_path}: {e}"
                print(error_msg)
                logging.error(error_msg)

    # Combine all collected content into a single string
    full_text = "\n".join(project_text)

    # Copy the full text to the system clipboard
    try:
        pyperclip.copy(full_text)
        print("Project contents have been copied to the clipboard.")
        logging.info("Project contents copied to clipboard successfully.")
    except Exception as e:
        error_msg = f"Failed to copy project contents to clipboard: {e}"
        print(error_msg)
        logging.error(error_msg)

    # Append the complete project content to the log file
    try:
        with open(log_filename, 'a', encoding='utf-8') as log_file:
            log_file.write("\n\n=== Full Project Content ===\n\n")
            log_file.write(full_text)
        print(f"Project contents have been appended to the log file: {log_filename}")
        logging.info("Project contents appended to log file successfully.")
    except Exception as e:
        error_msg = f"Failed to write project content to log file: {e}"
        print(error_msg)
        logging.error(error_msg)

    print("Script finished successfully.")
    logging.info("Script finished successfully.")

if __name__ == '__main__':
    main()



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\manage.py -----


#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\config\asgi.py -----


"""
ASGI config for config project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")

application = get_asgi_application()



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\config\settings.py -----


"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-z-=(1wc#gnz9n7chf0k4ym7&44@s_kmhz#j*snnawe-t2-)r)e"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",  # Must be present to serve static files

    # Your custom app
    "photos",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # Optionally add "django.template.context_processors.static"
                # if you plan to reference static files via {% static ... %}.
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Force script name if needed
#FORCE_SCRIPT_NAME = '/myphotoapp'

# Media files (Uploaded images)
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\config\urls.py -----


from django.conf import settings
from django.conf.urls.static import static
from django.contrib import admin
from django.urls import path

# Import your existing views
from photos.views import main_page, project_list, project_detail, repair_detail

urlpatterns = [
    path('admin/', admin.site.urls),

    # Original main page route
    path('', main_page, name='main_page'),

    # New routes for Projects and Repairs
    path('projects/', project_list, name='project_list'),
    path('projects/<int:project_id>/', project_detail, name='project_detail'),
    path('projects/<int:project_id>/repairs/<int:repair_id>/', repair_detail, name='repair_detail'),
]

# Serve media files in development
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\config\wsgi.py -----


"""
WSGI config for config project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")

application = get_wsgi_application()



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\config\__init__.py -----





----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\admin.py -----


from django.contrib import admin

# Register your models here.



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\apps.py -----


from django.apps import AppConfig


class PhotosConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "photos"



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\models.py -----


from django.db import models

"""
In this file, we have introduced three models:

1) Project  - Represents a specific project or job site (e.g., '123 Main Street').
2) Repair   - Represents a specific repair within a project, identified by a numeric repair_id.
3) Photo    - Stores uploaded images tied to a particular repair, with a category 
              (Survey, Demo, Detail, or Context).
"""

class Project(models.Model):
    """
    Project model holds the general information about a project/site.
    You can add more fields like address, manager, etc. as needed.
    """
    name = models.CharField(
        max_length=200,
        help_text="Name or identifier for the project (e.g., '123 Main St')."
    )
    description = models.TextField(
        blank=True,
        help_text="Optional detailed description about this project."
    )
    # Potential fields: managers = models.ManyToManyField(User, blank=True, related_name='managed_projects')

    def __str__(self):
        # Return the name as the display string for this model
        return self.name


class Repair(models.Model):
    """
    Repair model belongs to a Project.
    It can store relevant details such as coordinates or area for that repair.
    """
    project = models.ForeignKey(
        Project,
        on_delete=models.CASCADE,
        related_name='repairs',
        help_text="The project this repair belongs to."
    )
    repair_id = models.PositiveIntegerField(
        help_text="Numeric ID for this repair within the project."
    )
    x_coord = models.FloatField(
        null=True,
        blank=True,
        help_text="X coordinate of this repair, if applicable."
    )
    y_coord = models.FloatField(
        null=True,
        blank=True,
        help_text="Y coordinate of this repair, if applicable."
    )
    label = models.CharField(
        max_length=255,
        blank=True,
        help_text="Descriptive label or name for the repair."
    )
    area_sq_ft = models.FloatField(
        null=True,
        blank=True,
        help_text="Estimated area in square feet."
    )

    class Meta:
        # Enforce that a given project cannot have duplicate repair_ids
        unique_together = ('project', 'repair_id')

    def __str__(self):
        return f"Repair {self.repair_id} for {self.project.name}"


class Photo(models.Model):
    """
    Photo model is linked to a specific Repair.
    The category field identifies the stage/type of photo (Survey, Demo, etc.).
    """
    repair = models.ForeignKey(
        Repair,
        on_delete=models.CASCADE,
        related_name='photos',
        help_text="The repair this photo is associated with."
    )
    category = models.CharField(
        max_length=50,
        choices=[
            ('survey', 'Survey'),
            ('demo', 'Demo'),
            ('detail', 'Detail'),
            ('context', 'Context')
        ],
        help_text="Category describing what stage or type of photo this is."
    )
    image = models.ImageField(
        upload_to='photos/',
        help_text="The uploaded image file for this repair photo."
    )
    uploaded_at = models.DateTimeField(
        auto_now_add=True,
        help_text="Timestamp when this photo was uploaded."
    )

    def __str__(self):
        # Display which category photo this is and which repair it belongs to
        return f"{self.get_category_display()} Photo (Repair {self.repair.repair_id})"



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\tests.py -----


from django.test import TestCase

# Create your tests here.



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\views.py -----


from django.shortcuts import render, get_object_or_404, redirect
from .models import Project, Repair, Photo

"""
This file defines the views (controller logic) for:
- main_page       (original existing logic for main.html)
- project_list    (lists all projects)
- project_detail  (detail for a single project & its repairs)
- repair_detail   (detail for a single repair, includes photo uploads)
"""

def main_page(request):
    """
    Original main page view that renders your 'main.html'
    with placeholders and an example photo grid.
    Kept intact so you don't lose existing functionality.
    """
    return render(request, 'photos/main.html')


def project_list(request):
    """
    View to list all projects with basic styling.
    """
    projects = Project.objects.all().order_by('name')
    return render(request, 'photos/project_list.html', {
        'projects': projects
    })


def project_detail(request, project_id):
    """
    Shows the details of a single project, including all its repairs.
    """
    project = get_object_or_404(Project, id=project_id)
    repairs = project.repairs.all().order_by('repair_id')
    return render(request, 'photos/project_detail.html', {
        'project': project,
        'repairs': repairs
    })


def repair_detail(request, project_id, repair_id):
    """
    Shows one repair's details (coordinates, label, area) and
    lists all photos associated with it.

    Allows file uploads. If the user submits a file, we save it
    to the Photo model and redirect back to this detail view.
    """
    project = get_object_or_404(Project, id=project_id)
    repair = get_object_or_404(Repair, project=project, repair_id=repair_id)
    photos = repair.photos.all()

    if request.method == 'POST':
        # Check for the named "upload_photo" button
        if 'upload_photo' in request.POST:
            category = request.POST.get('category')
            image_file = request.FILES.get('image')

            if category and image_file:
                # Create a new Photo entry and save it to the database
                Photo.objects.create(
                    repair=repair,
                    category=category,
                    image=image_file
                )
                # Redirect to clear the form and show updated photos
                return redirect('repair_detail', project_id=project.id, repair_id=repair.repair_id)

    return render(request, 'photos/repair_detail.html', {
        'project': project,
        'repair': repair,
        'photos': photos
    })



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\__init__.py -----





----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\management\commands\import_data.py -----


import openpyxl  # Or 'import pandas' if you prefer that library
from django.core.management.base import BaseCommand, CommandError
from photos.models import Project, Repair

class Command(BaseCommand):
    help = "Import project and repair data from an Excel file."

    def add_arguments(self, parser):
        parser.add_argument('file_path', type=str, help="Path to the Excel file")

    def handle(self, *args, **options):
        file_path = options['file_path']

        # Load the specified Excel workbook
        try:
            workbook = openpyxl.load_workbook(file_path)
        except FileNotFoundError:
            raise CommandError(f"File not found: {file_path}")

        # Assuming we use the first sheet
        sheet = workbook.active

        # Example: Expect columns:
        # A: Project Name  B: Repair ID  C: Repair Label  D: Area (sq ft)
        # Adjust as needed for your actual spreadsheet layout
        for row in sheet.iter_rows(min_row=2, values_only=True):
            project_name = row[0]
            repair_id = row[1]
            repair_label = row[2]
            area_val = row[3]

            # Create or get the Project
            project_obj, created = Project.objects.get_or_create(name=project_name)

            # Create a new Repair for that Project
            Repair.objects.create(
                project=project_obj,
                repair_id=repair_id,
                label=repair_label,
                area_sq_ft=area_val,
            )

        self.stdout.write(self.style.SUCCESS('Data import complete!'))



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\templates\photos\main.html -----


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Photo Grid</title>

  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  >

  <style>
    /* Existing custom styling */
    .photo-container {
      border: 2px solid black;
      padding: 10px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100%;
      max-width: 100%;
      position: relative;
      background-color: #f8f9fa;
    }
    .photo-container img {
      width: 100%;
      height: auto;
      max-height: 200px;
      object-fit: contain;
      margin-bottom: 10px;
    }
    .photo-container button {
      position: relative;
      padding: 8px 16px;
      background-color: #007BFF;
      color: white;
      border: none;
      cursor: pointer;
      font-size: 16px;
      margin-top: 10px;
    }
    .photo-container button:hover {
      background-color: #0056b3;
    }
    .caption {
      font-size: 14px;
      font-weight: bold;
      color: black;
      margin-bottom: 10px;
    }
    .labels {
      text-align: center;
      font-size: 16px;
    }
    .dropdown-menu {
      width: 100%;
    }
  </style>
</head>
<body>

  <div class="container my-4">

    <!-- Header section -->
    <div class="text-center mb-4">
      <h1>Repair Tracking</h1>

      <!-- Link to Projects Page for easy navigation -->
      <a href="{% url 'project_list' %}" class="btn btn-primary mb-3">Go to All Projects</a><br>

      <!-- Repair ID Button (existing) -->
      <button class="btn btn-light" id="repairIdBtn" data-bs-toggle="modal" data-bs-target="#repairIdModal">
        Repair ID 48
      </button>

      <!-- Project Dropdown (existing) -->
      <div class="btn-group">
        <button class="btn btn-light dropdown-toggle" type="button" id="projectDropdown" data-bs-toggle="dropdown" aria-expanded="false">
          Project 123 Main Street
        </button>
        <ul class="dropdown-menu" aria-labelledby="projectDropdown">
          <li><a class="dropdown-item" href="#">222 Water Street</a></li>
          <li><a class="dropdown-item" href="#">777 Bingham Road</a></li>
        </ul>
      </div>
    </div>

    <!-- Photo grid (existing placeholders) -->
    <div class="row row-cols-1 row-cols-md-2 g-4">
      <!-- Photo 1 -->
      <div class="col">
        <div class="photo-container">
          <div class="caption">Survey Photo</div>
          <img src="placeholder.jpg" alt="Photo 1" id="photo1">
          <button onclick="document.getElementById('photo1-input').click()">Upload/Take Photo</button>
        </div>
      </div>
      <!-- Photo 2 -->
      <div class="col">
        <div class="photo-container">
          <div class="caption">Demo Photo</div>
          <img src="placeholder.jpg" alt="Photo 2" id="photo2">
          <button onclick="document.getElementById('photo2-input').click()">Upload/Take Photo</button>
        </div>
      </div>
      <!-- Photo 3 -->
      <div class="col">
        <div class="photo-container">
          <div class="caption">Finish Detail</div>
          <img src="placeholder.jpg" alt="Photo 3" id="photo3">
          <button onclick="document.getElementById('photo3-input').click()">Upload/Take Photo</button>
        </div>
      </div>
      <!-- Photo 4 -->
      <div class="col">
        <div class="photo-container">
          <div class="caption">Finish Context</div>
          <img src="placeholder.jpg" alt="Photo 4" id="photo4">
          <button onclick="document.getElementById('photo4-input').click()">Upload/Take Photo</button>
        </div>
      </div>
    </div>

    <!-- Labels section -->
    <div class="labels mt-4">
      <h5>Values</h5>
      <ul class="list-unstyled">
        <li>X Coordinate: 358</li>
        <li>Y Coordinate: 125</li>
        <li>Repair Label: Replace Unit</li>
        <li>Area in Square Feet: 5</li>
      </ul>
    </div>
  </div>

  <!-- Hidden file inputs for front-end placeholders -->
  <input type="file" accept="image/*" style="display: none;" id="photo1-input" onchange="updateImage('photo1')">
  <input type="file" accept="image/*" style="display: none;" id="photo2-input" onchange="updateImage('photo2')">
  <input type="file" accept="image/*" style="display: none;" id="photo3-input" onchange="updateImage('photo3')">
  <input type="file" accept="image/*" style="display: none;" id="photo4-input" onchange="updateImage('photo4')">

  <!-- Modal for Repair ID input -->
  <div class="modal fade" id="repairIdModal" tabindex="-1" aria-labelledby="repairIdModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="repairIdModalLabel">Enter New Repair ID</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="number" class="form-control" id="newRepairId" placeholder="Enter new repair ID">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="updateRepairId()">Save Repair ID</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Inline Scripts (existing logic) -->
  <script>
    function updateImage(photoId) {
      var input = document.getElementById(photoId + '-input');
      var photoElement = document.getElementById(photoId);
      var file = input.files[0];
      var reader = new FileReader();

      reader.onloadend = function () {
        photoElement.src = reader.result;
      };

      if (file) {
        reader.readAsDataURL(file);
      }
    }

    function updateRepairId() {
      var newRepairId = document.getElementById('newRepairId').value;
      if (newRepairId) {
        document.getElementById('repairIdBtn').innerText = "Repair ID " + newRepairId;
        var repairIdModal = new bootstrap.Modal(document.getElementById('repairIdModal'));
        repairIdModal.hide();
      }
    }
  </script>

  <!-- Bootstrap JS (and Popper) -->
  <script
    src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js">
  </script>
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js">
  </script>
</body>
</html>



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\templates\photos\project_detail.html -----


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Project Detail</title>
  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  >
</head>
<body class="bg-light">

  <div class="container py-4">
    <h1>Project: {{ project.name }}</h1>
    <p>{{ project.description }}</p>

    <h2 class="mt-4">Repairs</h2>
    <ul class="list-group">
      {% for rep in repairs %}
        <li class="list-group-item">
          <a href="{% url 'repair_detail' project.id rep.repair_id %}" class="text-decoration-none">
            Repair ID: {{ rep.repair_id }} - {{ rep.label }}
          </a>
        </li>
      {% endfor %}
    </ul>

    <div class="mt-4">
      <a href="{% url 'project_list' %}" class="btn btn-secondary">All Projects</a>
      <a href="{% url 'main_page' %}" class="btn btn-secondary">Main Page</a>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
  </script>
</body>
</html>



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\templates\photos\project_list.html -----


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Project List</title>
  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  >
</head>
<body class="bg-light">

  <div class="container py-4">
    <h1 class="mb-4">All Projects</h1>

    <ul class="list-group">
      {% for proj in projects %}
        <li class="list-group-item">
          <a href="{% url 'project_detail' proj.id %}" class="text-decoration-none">
            {{ proj.name }}
          </a>
        </li>
      {% endfor %}
    </ul>

    <!-- Button back to main page -->
    <div class="mt-3">
      <a href="{% url 'main_page' %}" class="btn btn-secondary">Main Page</a>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
  </script>
</body>
</html>



----- FILE: C:\Users\matt\Desktop\django\myphotoapp\photos\templates\photos\repair_detail.html -----


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Repair Detail</title>
  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  >
</head>
<body class="bg-light">

  <div class="container py-4">
    <h1>Repair {{ repair.repair_id }} (Project: {{ project.name }})</h1>

    <div class="mb-3">
      <p>Coordinates: ({{ repair.x_coord }}, {{ repair.y_coord }})</p>
      <p>Label: {{ repair.label }}</p>
      <p>Area: {{ repair.area_sq_ft }} sq ft</p>
    </div>

    <h2>Photos</h2>
    <ul class="list-group mb-4">
      {% for p in photos %}
        <li class="list-group-item">
          <strong>{{ p.get_category_display }} Photo</strong><br>
          <img
            src="{{ p.image.url }}"
            alt="Photo for repair {{ repair.repair_id }}"
            width="200"
            class="my-2"
          >
          <br>Uploaded on: {{ p.uploaded_at }}
        </li>
      {% endfor %}
    </ul>

    <h3>Upload a New Photo</h3>
    <form method="POST" enctype="multipart/form-data" class="mb-4">
      {% csrf_token %}
      <div class="mb-3">
        <label for="category-select" class="form-label">Category:</label>
        <select name="category" id="category-select" class="form-select">
          <option value="survey">Survey</option>
          <option value="demo">Demo</option>
          <option value="detail">Detail</option>
          <option value="context">Context</option>
        </select>
      </div>

      <div class="mb-3">
        <label for="image-input" class="form-label">Choose a photo:</label>
        <input
          type="file"
          name="image"
          accept="image/*"
          id="image-input"
          class="form-control"
        >
      </div>

      <button type="submit" name="upload_photo" class="btn btn-primary">
        Upload Photo
      </button>
    </form>

    <div>
      <a
        href="{% url 'project_detail' project.id %}"
        class="btn btn-secondary"
      >
        Back to {{ project.name }} Repairs
      </a>
      <a
        href="{% url 'project_list' %}"
        class="btn btn-secondary"
      >
        All Projects
      </a>
      <a
        href="{% url 'main_page' %}"
        class="btn btn-secondary"
      >
        Main Page
      </a>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
  </script>
</body>
</html>
2025-03-07 11:07:12,426 - INFO - Project contents appended to log file successfully.
2025-03-07 11:07:12,426 - INFO - Script finished successfully.
